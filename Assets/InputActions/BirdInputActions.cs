//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/BirdInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BirdInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BirdInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BirdInputActions"",
    ""maps"": [
        {
            ""name"": ""BirdActionMaps"",
            ""id"": ""3c2e36e2-60fe-4200-a96d-721ad42ecd12"",
            ""actions"": [
                {
                    ""name"": ""MoveForwardSide"",
                    ""type"": ""Value"",
                    ""id"": ""c310990a-9a13-4f7f-97f1-e1e765767306"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveUpDown"",
                    ""type"": ""Value"",
                    ""id"": ""addf4e13-52b6-44ac-a225-8c51a1c829a9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""104d90f0-6d72-484b-8cb2-33073aca2a6b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardSide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0046db53-c6e2-4322-b9ef-bb33a6ac208d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardSide"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a5b8e717-14aa-48c4-b013-b20907fe1bd9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardSide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6c47b67c-2d1a-4afc-80c1-3ac0e37b7a60"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardSide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""090d8d66-f043-4784-bc68-52ca64ba9a78"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardSide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""552792e5-4fc0-4895-bdfa-4790b3634395"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardSide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7e8ca33e-6b6d-4237-821c-4292310a7b5e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BirdActionMaps
        m_BirdActionMaps = asset.FindActionMap("BirdActionMaps", throwIfNotFound: true);
        m_BirdActionMaps_MoveForwardSide = m_BirdActionMaps.FindAction("MoveForwardSide", throwIfNotFound: true);
        m_BirdActionMaps_MoveUpDown = m_BirdActionMaps.FindAction("MoveUpDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BirdActionMaps
    private readonly InputActionMap m_BirdActionMaps;
    private List<IBirdActionMapsActions> m_BirdActionMapsActionsCallbackInterfaces = new List<IBirdActionMapsActions>();
    private readonly InputAction m_BirdActionMaps_MoveForwardSide;
    private readonly InputAction m_BirdActionMaps_MoveUpDown;
    public struct BirdActionMapsActions
    {
        private @BirdInputActions m_Wrapper;
        public BirdActionMapsActions(@BirdInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForwardSide => m_Wrapper.m_BirdActionMaps_MoveForwardSide;
        public InputAction @MoveUpDown => m_Wrapper.m_BirdActionMaps_MoveUpDown;
        public InputActionMap Get() { return m_Wrapper.m_BirdActionMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BirdActionMapsActions set) { return set.Get(); }
        public void AddCallbacks(IBirdActionMapsActions instance)
        {
            if (instance == null || m_Wrapper.m_BirdActionMapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BirdActionMapsActionsCallbackInterfaces.Add(instance);
            @MoveForwardSide.started += instance.OnMoveForwardSide;
            @MoveForwardSide.performed += instance.OnMoveForwardSide;
            @MoveForwardSide.canceled += instance.OnMoveForwardSide;
            @MoveUpDown.started += instance.OnMoveUpDown;
            @MoveUpDown.performed += instance.OnMoveUpDown;
            @MoveUpDown.canceled += instance.OnMoveUpDown;
        }

        private void UnregisterCallbacks(IBirdActionMapsActions instance)
        {
            @MoveForwardSide.started -= instance.OnMoveForwardSide;
            @MoveForwardSide.performed -= instance.OnMoveForwardSide;
            @MoveForwardSide.canceled -= instance.OnMoveForwardSide;
            @MoveUpDown.started -= instance.OnMoveUpDown;
            @MoveUpDown.performed -= instance.OnMoveUpDown;
            @MoveUpDown.canceled -= instance.OnMoveUpDown;
        }

        public void RemoveCallbacks(IBirdActionMapsActions instance)
        {
            if (m_Wrapper.m_BirdActionMapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBirdActionMapsActions instance)
        {
            foreach (var item in m_Wrapper.m_BirdActionMapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BirdActionMapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BirdActionMapsActions @BirdActionMaps => new BirdActionMapsActions(this);
    public interface IBirdActionMapsActions
    {
        void OnMoveForwardSide(InputAction.CallbackContext context);
        void OnMoveUpDown(InputAction.CallbackContext context);
    }
}
